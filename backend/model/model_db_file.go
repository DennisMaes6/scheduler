/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DBFile Filename of current DB
type DBFile struct {
	// filename of db file
	Filename string `json:"filename"`
}

// NewDBFile instantiates a new DBFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBFile(filename string) *DBFile {
	this := DBFile{}
	this.Filename = filename
	return &this
}

// NewDBFileWithDefaults instantiates a new DBFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBFileWithDefaults() *DBFile {
	this := DBFile{}
	return &this
}

// GetFilename returns the Filename field value
func (o *DBFile) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *DBFile) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *DBFile) SetFilename(v string) {
	o.Filename = v
}

func (o DBFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filename"] = o.Filename
	}
	return json.Marshal(toSerialize)
}

type NullableDBFile struct {
	value *DBFile
	isSet bool
}

func (v NullableDBFile) Get() *DBFile {
	return v.value
}

func (v *NullableDBFile) Set(val *DBFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDBFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDBFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBFile(val *DBFile) *NullableDBFile {
	return &NullableDBFile{value: val, isSet: true}
}

func (v NullableDBFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


