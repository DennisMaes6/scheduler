/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InstanceData Holds the instance data for scheduling.
type InstanceData struct {
	// The assistant instances representing the assistants for which to produce a schedule.
	Assistants []Assistant `json:"assistants"`
	// The days for which to produce a schedule.
	Days []Day `json:"days"`
}

// NewInstanceData instantiates a new InstanceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceData(assistants []Assistant, days []Day) *InstanceData {
	this := InstanceData{}
	this.Assistants = assistants
	this.Days = days
	return &this
}

// NewInstanceDataWithDefaults instantiates a new InstanceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceDataWithDefaults() *InstanceData {
	this := InstanceData{}
	return &this
}

// GetAssistants returns the Assistants field value
func (o *InstanceData) GetAssistants() []Assistant {
	if o == nil {
		var ret []Assistant
		return ret
	}

	return o.Assistants
}

// GetAssistantsOk returns a tuple with the Assistants field value
// and a boolean to check if the value has been set.
func (o *InstanceData) GetAssistantsOk() (*[]Assistant, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Assistants, true
}

// SetAssistants sets field value
func (o *InstanceData) SetAssistants(v []Assistant) {
	o.Assistants = v
}

// GetDays returns the Days field value
func (o *InstanceData) GetDays() []Day {
	if o == nil {
		var ret []Day
		return ret
	}

	return o.Days
}

// GetDaysOk returns a tuple with the Days field value
// and a boolean to check if the value has been set.
func (o *InstanceData) GetDaysOk() (*[]Day, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Days, true
}

// SetDays sets field value
func (o *InstanceData) SetDays(v []Day) {
	o.Days = v
}

func (o InstanceData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assistants"] = o.Assistants
	}
	if true {
		toSerialize["days"] = o.Days
	}
	return json.Marshal(toSerialize)
}

type NullableInstanceData struct {
	value *InstanceData
	isSet bool
}

func (v NullableInstanceData) Get() *InstanceData {
	return v.value
}

func (v *NullableInstanceData) Set(val *InstanceData) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceData) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceData(val *InstanceData) *NullableInstanceData {
	return &NullableInstanceData{value: val, isSet: true}
}

func (v NullableInstanceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


