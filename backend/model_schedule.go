/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Schedule Holds all data of a generated schedule.
type Schedule struct {
	// The fairness score of this schedule.
	FairnessScore float32 `json:"fairness_score"`
	// The balance score of this schedule.
	BalanceScore float32 `json:"balance_score"`
	// The fairness score for the JAEV shifts of this schedule.
	JaevFairnessScore float32 `json:"jaev_fairness_score"`
	// The balance score for the JAEV shifts of this schedule.
	JaevBalanceScore float32 `json:"jaev_balance_score"`
	IndividualSchedules *[]IndividualSchedule `json:"individual_schedules,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule(fairnessScore float32, balanceScore float32, jaevFairnessScore float32, jaevBalanceScore float32) *Schedule {
	this := Schedule{}
	this.FairnessScore = fairnessScore
	this.BalanceScore = balanceScore
	this.JaevFairnessScore = jaevFairnessScore
	this.JaevBalanceScore = jaevBalanceScore
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetFairnessScore returns the FairnessScore field value
func (o *Schedule) GetFairnessScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FairnessScore
}

// GetFairnessScoreOk returns a tuple with the FairnessScore field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetFairnessScoreOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FairnessScore, true
}

// SetFairnessScore sets field value
func (o *Schedule) SetFairnessScore(v float32) {
	o.FairnessScore = v
}

// GetBalanceScore returns the BalanceScore field value
func (o *Schedule) GetBalanceScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BalanceScore
}

// GetBalanceScoreOk returns a tuple with the BalanceScore field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetBalanceScoreOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BalanceScore, true
}

// SetBalanceScore sets field value
func (o *Schedule) SetBalanceScore(v float32) {
	o.BalanceScore = v
}

// GetJaevFairnessScore returns the JaevFairnessScore field value
func (o *Schedule) GetJaevFairnessScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.JaevFairnessScore
}

// GetJaevFairnessScoreOk returns a tuple with the JaevFairnessScore field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetJaevFairnessScoreOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JaevFairnessScore, true
}

// SetJaevFairnessScore sets field value
func (o *Schedule) SetJaevFairnessScore(v float32) {
	o.JaevFairnessScore = v
}

// GetJaevBalanceScore returns the JaevBalanceScore field value
func (o *Schedule) GetJaevBalanceScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.JaevBalanceScore
}

// GetJaevBalanceScoreOk returns a tuple with the JaevBalanceScore field value
// and a boolean to check if the value has been set.
func (o *Schedule) GetJaevBalanceScoreOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JaevBalanceScore, true
}

// SetJaevBalanceScore sets field value
func (o *Schedule) SetJaevBalanceScore(v float32) {
	o.JaevBalanceScore = v
}

// GetIndividualSchedules returns the IndividualSchedules field value if set, zero value otherwise.
func (o *Schedule) GetIndividualSchedules() []IndividualSchedule {
	if o == nil || o.IndividualSchedules == nil {
		var ret []IndividualSchedule
		return ret
	}
	return *o.IndividualSchedules
}

// GetIndividualSchedulesOk returns a tuple with the IndividualSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetIndividualSchedulesOk() (*[]IndividualSchedule, bool) {
	if o == nil || o.IndividualSchedules == nil {
		return nil, false
	}
	return o.IndividualSchedules, true
}

// HasIndividualSchedules returns a boolean if a field has been set.
func (o *Schedule) HasIndividualSchedules() bool {
	if o != nil && o.IndividualSchedules != nil {
		return true
	}

	return false
}

// SetIndividualSchedules gets a reference to the given []IndividualSchedule and assigns it to the IndividualSchedules field.
func (o *Schedule) SetIndividualSchedules(v []IndividualSchedule) {
	o.IndividualSchedules = &v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fairness_score"] = o.FairnessScore
	}
	if true {
		toSerialize["balance_score"] = o.BalanceScore
	}
	if true {
		toSerialize["jaev_fairness_score"] = o.JaevFairnessScore
	}
	if true {
		toSerialize["jaev_balance_score"] = o.JaevBalanceScore
	}
	if o.IndividualSchedules != nil {
		toSerialize["individual_schedules"] = o.IndividualSchedules
	}
	return json.Marshal(toSerialize)
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


