/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssistantType The skill category of an assistant.
type AssistantType string

// List of AssistantType
const (
	JA AssistantType = "JA"
	JA_F AssistantType = "JA_F"
	SA AssistantType = "SA"
	SA_F AssistantType = "SA_F"
	SA_NEO AssistantType = "SA_NEO"
	SA_F_NEO AssistantType = "SA_F_NEO"
)

// All allowed values of AssistantType enum
var AllowedAssistantTypeEnumValues = []AssistantType{
	"JA",
	"JA_F",
	"SA",
	"SA_F",
	"SA_NEO",
	"SA_F_NEO",
}

func (v *AssistantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssistantType(value)
	for _, existing := range AllowedAssistantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssistantType", value)
}

// NewAssistantTypeFromValue returns a pointer to a valid AssistantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssistantTypeFromValue(v string) (*AssistantType, error) {
	ev := AssistantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssistantType: valid values are %v", v, AllowedAssistantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssistantType) IsValid() bool {
	for _, existing := range AllowedAssistantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssistantType value
func (v AssistantType) Ptr() *AssistantType {
	return &v
}

type NullableAssistantType struct {
	value *AssistantType
	isSet bool
}

func (v NullableAssistantType) Get() *AssistantType {
	return v.value
}

func (v *NullableAssistantType) Set(val *AssistantType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantType(val *AssistantType) *NullableAssistantType {
	return &NullableAssistantType{value: val, isSet: true}
}

func (v NullableAssistantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

