/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Assistant Holds all information for one assistant.
type Assistant struct {
	// The identification number of this assistant.
	Id int32 `json:"id"`
	// The name of this assistant.
	Name string `json:"name"`
	Type AssistantType `json:"type"`
	// The day numbers corresponding to the free days granted to this assistant for the current scheduling period.
	FreeDays []int32 `json:"free_days"`
}

// NewAssistant instantiates a new Assistant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistant(id int32, name string, type_ AssistantType, freeDays []int32) *Assistant {
	this := Assistant{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.FreeDays = freeDays
	return &this
}

// NewAssistantWithDefaults instantiates a new Assistant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantWithDefaults() *Assistant {
	this := Assistant{}
	return &this
}

// GetId returns the Id field value
func (o *Assistant) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Assistant) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Assistant) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Assistant) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Assistant) GetType() AssistantType {
	if o == nil {
		var ret AssistantType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetTypeOk() (*AssistantType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Assistant) SetType(v AssistantType) {
	o.Type = v
}

// GetFreeDays returns the FreeDays field value
func (o *Assistant) GetFreeDays() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.FreeDays
}

// GetFreeDaysOk returns a tuple with the FreeDays field value
// and a boolean to check if the value has been set.
func (o *Assistant) GetFreeDaysOk() (*[]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FreeDays, true
}

// SetFreeDays sets field value
func (o *Assistant) SetFreeDays(v []int32) {
	o.FreeDays = v
}

func (o Assistant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["free_days"] = o.FreeDays
	}
	return json.Marshal(toSerialize)
}

type NullableAssistant struct {
	value *Assistant
	isSet bool
}

func (v NullableAssistant) Get() *Assistant {
	return v.value
}

func (v *NullableAssistant) Set(val *Assistant) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistant) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistant(val *Assistant) *NullableAssistant {
	return &NullableAssistant{value: val, isSet: true}
}

func (v NullableAssistant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


