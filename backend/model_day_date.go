/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DayDate Represents the date of this day.
type DayDate struct {
	// The day of month of this day.
	Day int32 `json:"day"`
	// The month of this day. 1 = January, 12 = December
	Month int32 `json:"month"`
	// The year of this day.
	Year int32 `json:"year"`
}

// NewDayDate instantiates a new DayDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDayDate(day int32, month int32, year int32) *DayDate {
	this := DayDate{}
	this.Day = day
	this.Month = month
	this.Year = year
	return &this
}

// NewDayDateWithDefaults instantiates a new DayDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDayDateWithDefaults() *DayDate {
	this := DayDate{}
	return &this
}

// GetDay returns the Day field value
func (o *DayDate) GetDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *DayDate) GetDayOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *DayDate) SetDay(v int32) {
	o.Day = v
}

// GetMonth returns the Month field value
func (o *DayDate) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *DayDate) GetMonthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *DayDate) SetMonth(v int32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *DayDate) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *DayDate) GetYearOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *DayDate) SetYear(v int32) {
	o.Year = v
}

func (o DayDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["day"] = o.Day
	}
	if true {
		toSerialize["month"] = o.Month
	}
	if true {
		toSerialize["year"] = o.Year
	}
	return json.Marshal(toSerialize)
}

type NullableDayDate struct {
	value *DayDate
	isSet bool
}

func (v NullableDayDate) Get() *DayDate {
	return v.value
}

func (v *NullableDayDate) Set(val *DayDate) {
	v.value = val
	v.isSet = true
}

func (v NullableDayDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDayDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDayDate(val *DayDate) *NullableDayDate {
	return &NullableDayDate{value: val, isSet: true}
}

func (v NullableDayDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDayDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


