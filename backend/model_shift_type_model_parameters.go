/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ShiftTypeModelParameters Holds the shift type specific model parameters.
type ShiftTypeModelParameters struct {
	ShiftType ShiftType `json:"shift_type"`
	// The weight of this shift type in the fairness score.
	ShiftWorkload float32 `json:"shift_workload"`
	// The amount of personnel needed for this particular shift.
	ShiftCoverage float32 `json:"shift_coverage"`
	// The number of assignments per assisant allowed above the minimun for this shift type.
	MaxBuffer int32 `json:"max_buffer"`
}

// NewShiftTypeModelParameters instantiates a new ShiftTypeModelParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShiftTypeModelParameters(shiftType ShiftType, shiftWorkload float32, shiftCoverage float32, maxBuffer int32) *ShiftTypeModelParameters {
	this := ShiftTypeModelParameters{}
	this.ShiftType = shiftType
	this.ShiftWorkload = shiftWorkload
	this.ShiftCoverage = shiftCoverage
	this.MaxBuffer = maxBuffer
	return &this
}

// NewShiftTypeModelParametersWithDefaults instantiates a new ShiftTypeModelParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShiftTypeModelParametersWithDefaults() *ShiftTypeModelParameters {
	this := ShiftTypeModelParameters{}
	return &this
}

// GetShiftType returns the ShiftType field value
func (o *ShiftTypeModelParameters) GetShiftType() ShiftType {
	if o == nil {
		var ret ShiftType
		return ret
	}

	return o.ShiftType
}

// GetShiftTypeOk returns a tuple with the ShiftType field value
// and a boolean to check if the value has been set.
func (o *ShiftTypeModelParameters) GetShiftTypeOk() (*ShiftType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShiftType, true
}

// SetShiftType sets field value
func (o *ShiftTypeModelParameters) SetShiftType(v ShiftType) {
	o.ShiftType = v
}

// GetShiftWorkload returns the ShiftWorkload field value
func (o *ShiftTypeModelParameters) GetShiftWorkload() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ShiftWorkload
}

// GetShiftWorkloadOk returns a tuple with the ShiftWorkload field value
// and a boolean to check if the value has been set.
func (o *ShiftTypeModelParameters) GetShiftWorkloadOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShiftWorkload, true
}

// SetShiftWorkload sets field value
func (o *ShiftTypeModelParameters) SetShiftWorkload(v float32) {
	o.ShiftWorkload = v
}

// GetShiftCoverage returns the ShiftCoverage field value
func (o *ShiftTypeModelParameters) GetShiftCoverage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ShiftCoverage
}

// GetShiftCoverageOk returns a tuple with the ShiftCoverage field value
// and a boolean to check if the value has been set.
func (o *ShiftTypeModelParameters) GetShiftCoverageOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ShiftCoverage, true
}

// SetShiftCoverage sets field value
func (o *ShiftTypeModelParameters) SetShiftCoverage(v float32) {
	o.ShiftCoverage = v
}

// GetMaxBuffer returns the MaxBuffer field value
func (o *ShiftTypeModelParameters) GetMaxBuffer() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxBuffer
}

// GetMaxBufferOk returns a tuple with the MaxBuffer field value
// and a boolean to check if the value has been set.
func (o *ShiftTypeModelParameters) GetMaxBufferOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaxBuffer, true
}

// SetMaxBuffer sets field value
func (o *ShiftTypeModelParameters) SetMaxBuffer(v int32) {
	o.MaxBuffer = v
}

func (o ShiftTypeModelParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shift_type"] = o.ShiftType
	}
	if true {
		toSerialize["shift_workload"] = o.ShiftWorkload
	}
	if true {
		toSerialize["shift_coverage"] = o.ShiftCoverage
	}
	if true {
		toSerialize["max_buffer"] = o.MaxBuffer
	}
	return json.Marshal(toSerialize)
}

type NullableShiftTypeModelParameters struct {
	value *ShiftTypeModelParameters
	isSet bool
}

func (v NullableShiftTypeModelParameters) Get() *ShiftTypeModelParameters {
	return v.value
}

func (v *NullableShiftTypeModelParameters) Set(val *ShiftTypeModelParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableShiftTypeModelParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableShiftTypeModelParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShiftTypeModelParameters(val *ShiftTypeModelParameters) *NullableShiftTypeModelParameters {
	return &NullableShiftTypeModelParameters{value: val, isSet: true}
}

func (v NullableShiftTypeModelParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShiftTypeModelParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


