/*
 * Scheduler API
 *
 * API for getting generated schedules. Also used for getting and setting model parameters and instance data.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Schedule - Holds all data of a generated schedule.
type Schedule struct {

	// The fairness score of this schedule.
	FairnessScore float32 `json:"fairness_score"`

	// The balance score of this schedule.
	BalanceScore float32 `json:"balance_score"`

	// The fairness score for the JAEV shifts of this schedule.
	JaevFairnessScore float32 `json:"jaev_fairness_score"`

	// The balance score for the JAEV shifts of this schedule.
	JaevBalanceScore float32 `json:"jaev_balance_score"`

	IndividualSchedules []IndividualSchedule `json:"individual_schedules,omitempty"`
}

// AssertScheduleRequired checks if the required fields are not zero-ed
func AssertScheduleRequired(obj Schedule) error {
	elements := map[string]interface{}{
		"fairness_score": obj.FairnessScore,
		"balance_score": obj.BalanceScore,
		"jaev_fairness_score": obj.JaevFairnessScore,
		"jaev_balance_score": obj.JaevBalanceScore,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.IndividualSchedules {
		if err := AssertIndividualScheduleRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseScheduleRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Schedule (e.g. [][]Schedule), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseScheduleRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSchedule, ok := obj.(Schedule)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertScheduleRequired(aSchedule)
	})
}
