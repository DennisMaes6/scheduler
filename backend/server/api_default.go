/*
 * Scheduler API
 *
 * Basic API for retrieving schedules, based on a ScheduleInput object.
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/jorensjongers/scheduler/backend/model"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"ScheduleGet",
			strings.ToUpper("Get"),
			"/schedule",
			c.ScheduleGet,
		},
		{
			"SetModelParamsPost",
			strings.ToUpper("Post"),
			"/set-model-params",
			c.SetModelParamsPost,
		},
	}
}

// ScheduleGet - Returns a generated schedule.
func (c *DefaultApiController) ScheduleGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ScheduleGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SetModelParamsPost - Sets the model paramters in the backend.
func (c *DefaultApiController) SetModelParamsPost(w http.ResponseWriter, r *http.Request) {
	modelParameters := &model.ModelParameters{}
	if err := json.NewDecoder(r.Body).Decode(&modelParameters); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.SetModelParamsPost(r.Context(), *modelParameters)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
