/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ModelParameters Holds all model parameters for generating schedules.
type ModelParameters struct {
	// The minimal balance score for an acceptable solution.
	MinBalance *int32 `json:"min_balance,omitempty"`
	// The mininmal balance score for JAEV shifts for an acceptable solution.
	MinBalanceJaev *int32 `json:"min_balance_jaev,omitempty"`
	ShiftTypeParameters *[]ShiftTypeModelParameters `json:"shift_type_parameters,omitempty"`
}

// NewModelParameters instantiates a new ModelParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelParameters() *ModelParameters {
	this := ModelParameters{}
	return &this
}

// NewModelParametersWithDefaults instantiates a new ModelParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelParametersWithDefaults() *ModelParameters {
	this := ModelParameters{}
	return &this
}

// GetMinBalance returns the MinBalance field value if set, zero value otherwise.
func (o *ModelParameters) GetMinBalance() int32 {
	if o == nil || o.MinBalance == nil {
		var ret int32
		return ret
	}
	return *o.MinBalance
}

// GetMinBalanceOk returns a tuple with the MinBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelParameters) GetMinBalanceOk() (*int32, bool) {
	if o == nil || o.MinBalance == nil {
		return nil, false
	}
	return o.MinBalance, true
}

// HasMinBalance returns a boolean if a field has been set.
func (o *ModelParameters) HasMinBalance() bool {
	if o != nil && o.MinBalance != nil {
		return true
	}

	return false
}

// SetMinBalance gets a reference to the given int32 and assigns it to the MinBalance field.
func (o *ModelParameters) SetMinBalance(v int32) {
	o.MinBalance = &v
}

// GetMinBalanceJaev returns the MinBalanceJaev field value if set, zero value otherwise.
func (o *ModelParameters) GetMinBalanceJaev() int32 {
	if o == nil || o.MinBalanceJaev == nil {
		var ret int32
		return ret
	}
	return *o.MinBalanceJaev
}

// GetMinBalanceJaevOk returns a tuple with the MinBalanceJaev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelParameters) GetMinBalanceJaevOk() (*int32, bool) {
	if o == nil || o.MinBalanceJaev == nil {
		return nil, false
	}
	return o.MinBalanceJaev, true
}

// HasMinBalanceJaev returns a boolean if a field has been set.
func (o *ModelParameters) HasMinBalanceJaev() bool {
	if o != nil && o.MinBalanceJaev != nil {
		return true
	}

	return false
}

// SetMinBalanceJaev gets a reference to the given int32 and assigns it to the MinBalanceJaev field.
func (o *ModelParameters) SetMinBalanceJaev(v int32) {
	o.MinBalanceJaev = &v
}

// GetShiftTypeParameters returns the ShiftTypeParameters field value if set, zero value otherwise.
func (o *ModelParameters) GetShiftTypeParameters() []ShiftTypeModelParameters {
	if o == nil || o.ShiftTypeParameters == nil {
		var ret []ShiftTypeModelParameters
		return ret
	}
	return *o.ShiftTypeParameters
}

// GetShiftTypeParametersOk returns a tuple with the ShiftTypeParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelParameters) GetShiftTypeParametersOk() (*[]ShiftTypeModelParameters, bool) {
	if o == nil || o.ShiftTypeParameters == nil {
		return nil, false
	}
	return o.ShiftTypeParameters, true
}

// HasShiftTypeParameters returns a boolean if a field has been set.
func (o *ModelParameters) HasShiftTypeParameters() bool {
	if o != nil && o.ShiftTypeParameters != nil {
		return true
	}

	return false
}

// SetShiftTypeParameters gets a reference to the given []ShiftTypeModelParameters and assigns it to the ShiftTypeParameters field.
func (o *ModelParameters) SetShiftTypeParameters(v []ShiftTypeModelParameters) {
	o.ShiftTypeParameters = &v
}

func (o ModelParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinBalance != nil {
		toSerialize["min_balance"] = o.MinBalance
	}
	if o.MinBalanceJaev != nil {
		toSerialize["min_balance_jaev"] = o.MinBalanceJaev
	}
	if o.ShiftTypeParameters != nil {
		toSerialize["shift_type_parameters"] = o.ShiftTypeParameters
	}
	return json.Marshal(toSerialize)
}

type NullableModelParameters struct {
	value *ModelParameters
	isSet bool
}

func (v NullableModelParameters) Get() *ModelParameters {
	return v.value
}

func (v *NullableModelParameters) Set(val *ModelParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableModelParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableModelParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelParameters(val *ModelParameters) *NullableModelParameters {
	return &NullableModelParameters{value: val, isSet: true}
}

func (v NullableModelParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


