/*
 * Scheduler API
 *
 * API for getting generated schedules. Also used for getting and setting model parameters and instance data.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Day - Represents a single day in the scheduling period.
type Day struct {

	// The day number of this day in the current scheduling period.
	Id int32 `json:"id"`

	Date DayDate `json:"date"`

	// Indicates whether or not this day should be considered a holiday in the produced schedule.
	IsHoliday bool `json:"is_holiday"`
}

// AssertDayRequired checks if the required fields are not zero-ed
func AssertDayRequired(obj Day) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"date": obj.Date,
		"is_holiday": obj.IsHoliday,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertDayDateRequired(obj.Date); err != nil {
		return err
	}
	return nil
}

// AssertRecurseDayRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Day (e.g. [][]Day), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDayRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDay, ok := obj.(Day)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDayRequired(aDay)
	})
}
