/*
 * Scheduler API
 *
 * API for getting generated schedules. Also used for getting and setting model parameters and instance data.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// Assistant - Holds all information for one assistant.
type Assistant struct {

	// The identification number of this assistant.
	Id int32 `json:"id"`

	// The name of this assistant.
	Name string `json:"name"`

	Type AssistantType `json:"type"`

	// The day numbers corresponding to the free days granted to this assistant for the current scheduling period.
	FreeDays []int32 `json:"free_days"`
}

// AssertAssistantRequired checks if the required fields are not zero-ed
func AssertAssistantRequired(obj Assistant) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"type": obj.Type,
		"free_days": obj.FreeDays,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseAssistantRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Assistant (e.g. [][]Assistant), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAssistantRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAssistant, ok := obj.(Assistant)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAssistantRequired(aAssistant)
	})
}
