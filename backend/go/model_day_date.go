/*
 * Scheduler API
 *
 * API for getting generated schedules. Also used for getting and setting model parameters and instance data.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// DayDate - Represents the date of this day.
type DayDate struct {

	// The day of month of this day.
	Day int32 `json:"day"`

	// The month of this day. 1 = January, 12 = December
	Month int32 `json:"month"`

	// The year of this day.
	Year int32 `json:"year"`
}

// AssertDayDateRequired checks if the required fields are not zero-ed
func AssertDayDateRequired(obj DayDate) error {
	elements := map[string]interface{}{
		"day": obj.Day,
		"month": obj.Month,
		"year": obj.Year,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseDayDateRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of DayDate (e.g. [][]DayDate), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseDayDateRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aDayDate, ok := obj.(DayDate)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertDayDateRequired(aDayDate)
	})
}
