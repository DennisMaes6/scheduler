/*
 * Scheduler API
 *
 * API for getting generated schedules. Also used for getting and setting model parameters and instance data.
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// InstanceData - Holds the instance data for scheduling.
type InstanceData struct {

	// The assistant instances representing the assistants for which to produce a schedule.
	Assistants []Assistant `json:"assistants"`

	// The days for which to produce a schedule.
	Days []Day `json:"days"`
}

// AssertInstanceDataRequired checks if the required fields are not zero-ed
func AssertInstanceDataRequired(obj InstanceData) error {
	elements := map[string]interface{}{
		"assistants": obj.Assistants,
		"days": obj.Days,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Assistants {
		if err := AssertAssistantRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Days {
		if err := AssertDayRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseInstanceDataRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of InstanceData (e.g. [][]InstanceData), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseInstanceDataRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aInstanceData, ok := obj.(InstanceData)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertInstanceDataRequired(aInstanceData)
	})
}
