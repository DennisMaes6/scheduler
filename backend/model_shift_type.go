/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ShiftType Identifies a specific shift type. Includes the FREE shift type.
type ShiftType string

// List of ShiftType
const (
	JAEV ShiftType = "JAEV"
	JAWE ShiftType = "JAWE"
	JAHO ShiftType = "JAHO"
	SANW ShiftType = "SANW"
	SAEW ShiftType = "SAEW"
	SAWE ShiftType = "SAWE"
	SAHO ShiftType = "SAHO"
	TPWE ShiftType = "TPWE"
	TPHO ShiftType = "TPHO"
	CALL ShiftType = "CALL"
	TPNF ShiftType = "TPNF"
	FREE ShiftType = "FREE"
)

// All allowed values of ShiftType enum
var AllowedShiftTypeEnumValues = []ShiftType{
	"JAEV",
	"JAWE",
	"JAHO",
	"SANW",
	"SAEW",
	"SAWE",
	"SAHO",
	"TPWE",
	"TPHO",
	"CALL",
	"TPNF",
	"FREE",
}

func (v *ShiftType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShiftType(value)
	for _, existing := range AllowedShiftTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShiftType", value)
}

// NewShiftTypeFromValue returns a pointer to a valid ShiftType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShiftTypeFromValue(v string) (*ShiftType, error) {
	ev := ShiftType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShiftType: valid values are %v", v, AllowedShiftTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShiftType) IsValid() bool {
	for _, existing := range AllowedShiftTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShiftType value
func (v ShiftType) Ptr() *ShiftType {
	return &v
}

type NullableShiftType struct {
	value *ShiftType
	isSet bool
}

func (v NullableShiftType) Get() *ShiftType {
	return v.value
}

func (v *NullableShiftType) Set(val *ShiftType) {
	v.value = val
	v.isSet = true
}

func (v NullableShiftType) IsSet() bool {
	return v.isSet
}

func (v *NullableShiftType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShiftType(val *ShiftType) *NullableShiftType {
	return &NullableShiftType{value: val, isSet: true}
}

func (v NullableShiftType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShiftType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

