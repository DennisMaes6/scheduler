/*
Scheduler API

API for getting generated schedules. Also used for getting and setting model parameters and instance data.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Day Represents a single day in the scheduling period.
type Day struct {
	// The day number of this day in the current scheduling period.
	Id int32 `json:"id"`
	Date DayDate `json:"date"`
	// Indicates whether or not this day should be considered a holiday in the produced schedule.
	IsHoliday bool `json:"is_holiday"`
}

// NewDay instantiates a new Day object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDay(id int32, date DayDate, isHoliday bool) *Day {
	this := Day{}
	this.Id = id
	this.Date = date
	this.IsHoliday = isHoliday
	return &this
}

// NewDayWithDefaults instantiates a new Day object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDayWithDefaults() *Day {
	this := Day{}
	return &this
}

// GetId returns the Id field value
func (o *Day) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Day) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Day) SetId(v int32) {
	o.Id = v
}

// GetDate returns the Date field value
func (o *Day) GetDate() DayDate {
	if o == nil {
		var ret DayDate
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Day) GetDateOk() (*DayDate, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Day) SetDate(v DayDate) {
	o.Date = v
}

// GetIsHoliday returns the IsHoliday field value
func (o *Day) GetIsHoliday() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHoliday
}

// GetIsHolidayOk returns a tuple with the IsHoliday field value
// and a boolean to check if the value has been set.
func (o *Day) GetIsHolidayOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsHoliday, true
}

// SetIsHoliday sets field value
func (o *Day) SetIsHoliday(v bool) {
	o.IsHoliday = v
}

func (o Day) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["is_holiday"] = o.IsHoliday
	}
	return json.Marshal(toSerialize)
}

type NullableDay struct {
	value *Day
	isSet bool
}

func (v NullableDay) Get() *Day {
	return v.value
}

func (v *NullableDay) Set(val *Day) {
	v.value = val
	v.isSet = true
}

func (v NullableDay) IsSet() bool {
	return v.isSet
}

func (v *NullableDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDay(val *Day) *NullableDay {
	return &NullableDay{value: val, isSet: true}
}

func (v NullableDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


